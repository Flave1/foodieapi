import { User } from '@prisma/client';
import { EditUserDto } from './dto';
import { UserService } from './user.service';
import { Request, Response } from 'express';
import { DeleteDto } from 'src/dto/delete.dto';
export declare class UserController {
    private userService;
    constructor(userService: UserService);
    getMe(user: User, req: Request): {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        hash: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    };
    getAll(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }[]>;
    editStaff(restaurantId: string, dto: EditUserDto, id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        hash: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }>;
    editDriver(restaurantId: string, dto: EditUserDto, id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        hash: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }>;
    getStaffUser(id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        hash: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }>;
    getDriverUser(id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        hash: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }>;
    getUserByRestaurantId(restaurantId: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }[]>;
    getStaff(restaurantId: string, res: Response): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }[]>;
    getDrivers(restaurantId: string, res: Response): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }[]>;
    getCustomers(restaurantId: string, res: Response): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }[]>;
    deleteById(restaurantId: string, dto: DeleteDto): Promise<{
        status: string;
        message: string;
    }>;
}

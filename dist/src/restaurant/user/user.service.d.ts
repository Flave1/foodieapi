import { PrismaService } from '../../prisma/prisma.service';
import { EditUserDto } from './dto';
import { GatewayService } from 'src/gateway/gateway.service';
import { DeleteDto } from 'src/dto/delete.dto';
export declare class UserService {
    private prisma;
    private socket;
    constructor(prisma: PrismaService, socket: GatewayService);
    updateUser(userId: number, dto: EditUserDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        hash: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }>;
    updateDriverUser(userId: number, dto: EditUserDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        hash: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }>;
    updateStaffUser(userId: number, dto: EditUserDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        hash: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }>;
    getUserById(userId: number): Promise<{
        id: number;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        userTypeId: number;
        status: boolean;
        addresses: {
            id: number;
            label: string;
            isDefault: boolean;
        }[];
    }>;
    getUserByRestaurantId(restaurantId: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }[]>;
    getUserByStaffId(staffId: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        hash: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }>;
    getUserByDriverId(driverId: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        hash: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }>;
    getRestaurantStaff(restaurantId: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }[]>;
    getRestaurantDrivers(restaurantId: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }[]>;
    getRestaurantCustomers(restaurantId: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }[]>;
    getAllUsers(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        firstName: string;
        lastName: string;
        phoneNumber: string;
        otherPhoneNumber: string;
        address: string;
        nextOfKinName: string;
        nextOfKinPhoneNumber: string;
        nextOfKinAddress: string;
        userTypeId: number;
        courierTypeId: number;
        restaurantId: number;
        passwordResetToken: string;
        deleted: boolean;
        status: boolean;
    }[]>;
    getSuperUser(): Promise<{
        admin: string;
    }>;
    deleteById(dto: DeleteDto): Promise<{
        status: string;
        message: string;
    }>;
}

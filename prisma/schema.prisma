// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


model Restaurant {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  status        Boolean?
  deleted       Boolean?

  users User[]

  menuCategory MenuCategory[]

  menu Menu[]

  availabilitySchedule AvailabilitySchedule[]

  @@map("restaurant")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstName String?
  lastName  String?

  phoneNumber          String?
  otherPhoneNumber     String?
  address              String?
  nextOfKinName        String?
  nextOfKinPhoneNumber String?
  nextOfKinAddress     String?
  status        Boolean?
  deleted       Boolean?

  userTypeId Int
  UserType   UserType @relation(fields: [userTypeId], references: [id])

  courierTypeId Int
  courierType   CourierType @relation(fields: [courierTypeId], references: [id])


  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  passwordResetToken  String?

  @@map("users")
}

model UserType {
  id        Int      @id @default(autoincrement())
  Name      String
  status        Boolean?
  deleted       Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("userType")
}

model CourierType {
  id        Int      @id @default(autoincrement())
  Name      String
  status        Boolean?
  deleted       Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("courierType")
}

model MenuCategory {
  id      Int    @id @default(autoincrement())
  name    String
  description   String
  image         String
  status        Boolean
  deleted       Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  menu Menu[]

  @@map("menuCategory")
}


model Menu {
  id      Int    @id @default(autoincrement())
  name    String
  description   String
  image         String
  price         Decimal
  availability  Boolean
  discount      String?
  dietaryInformation  String?
  status        Boolean
  deleted       Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  menuCategoryId Int
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onUpdate: NoAction)

  availabilitySchedule AvailabilitySchedule[]
  @@map("menu")
}

model AvailabilitySchedule {
  id         Int    @id @default(autoincrement())
  dayOfWeek  Int
  startTime  String
  endTime    String
  status        Boolean
  deleted       Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  menuId     Int
  menu   Menu @relation(fields: [menuId], references: [id],  onUpdate: NoAction)

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("availabilitySchedule")
}

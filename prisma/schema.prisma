generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  name                 String?
  description          String?
  email                String?
  image                String?
  deleted              Boolean?
  status               Boolean?
  phoneNumber          String?
  address              String?
  openingTime          String?
  closingTime          String?
  hasFreeDelivery      Boolean?
  freeDeliveryAmount   Decimal?
  clientId             Int
  availabilitySchedule AvailabilitySchedule[]
  menu                 Menu[]
  menuCategory         MenuCategory[]
  users                User[]
  menuOrders           MenuOrder[]

  client              Client @relation(fields: [clientId], references: [id])

  @@map("restaurant")
}

model User {
  id                   Int         @id @default(autoincrement())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  email                String      @unique
  hash                 String
  firstName            String?
  lastName             String?
  phoneNumber          String?
  otherPhoneNumber     String?
  address              String?
  nextOfKinName        String?
  nextOfKinPhoneNumber String?
  nextOfKinAddress     String?
  userTypeId           Int
  courierTypeId        Int
  restaurantId         Int
  passwordResetToken   String?
  deleted              Boolean?
  status               Boolean?
  courierType          CourierType @relation(fields: [courierTypeId], references: [id])
  restaurant           Restaurant  @relation(fields: [restaurantId], references: [id])
  userType             UserType    @relation(fields: [userTypeId], references: [id])

  @@map("users")
}

model UserType {
  id        Int      @id @default(autoincrement())
  Name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean?
  status    Boolean?
  users     User[]

  @@map("userType")
}

model CourierType {
  id        Int      @id @default(autoincrement())
  Name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean?
  status    Boolean?
  users     User[]

  @@map("courierType")
}

model MenuCategory {
  id           Int        @id @default(autoincrement())
  name         String
  description  String
  image        String
  status       Boolean
  deleted      Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId Int
  menu         Menu[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("menuCategory")
}

model Menu {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String
  image                String
  price                Decimal
  availability         Boolean
  discount             String?
  dietaryInformation   String?
  status               Boolean
  deleted              Boolean
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  menuCategoryId       Int
  restaurantId         Int
  availabilitySchedule AvailabilitySchedule[]
  MenuOrders           MenuOrder[]
  menuCategory         MenuCategory           @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  restaurant           Restaurant             @relation(fields: [restaurantId], references: [id], onUpdate: NoAction)

  @@map("menu")
}

model AvailabilitySchedule {
  id           Int        @id @default(autoincrement())
  dayOfWeek    Int
  startTime    String
  endTime      String
  status       Boolean
  deleted      Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  menuId       Int
  restaurantId Int
  menu         Menu       @relation(fields: [menuId], references: [id], onUpdate: NoAction)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("availabilitySchedule")
}

model MenuOrder{
  id  Int   @id @default(autoincrement())
  customerId Int
  restaurantId Int
  menuId      Int
  quantity Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  status Int
  deleted Boolean

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menu   Menu @relation(fields: [menuId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("menuOrders")
}

model Country {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  countryName          String?
  countryCode          String?
  currencyName         String?
  currencyCode         String?
  deleted              Boolean?
  status               Boolean?

  client              Client[]

  @@map("country")
}

model Client {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  name                 String?
  description          String?
  email                String?
  image                String?
  deleted              Boolean?
  status               Boolean?
  phoneNumber          String?
  address              String?
  countryId            Int
  restaurant           Restaurant[]

  country              Country @relation(fields: [countryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("client")
}